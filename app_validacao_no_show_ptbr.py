# app.py
from __future__ import annotations
import io, re, unicodedata
from datetime import datetime
import numpy as np
import pandas as pd
import streamlit as st

from utils.auth import login
from backend.db import init_db
from backend.repo import create_dataset, list_datasets, load_rows_for_user, save_conferencia

# ---------- utils ----------
def _rm_acc(s: str) -> str:
    return "".join(c for c in unicodedata.normalize("NFD", s) if unicodedata.category(c) != "Mn")
def canon(s: str) -> str:
    if s is None or (isinstance(s, float) and pd.isna(s)): return ""
    s = str(s).replace("‚Äì","-").replace("‚Äî","-")
    s = _rm_acc(s).lower()
    s = re.sub(r"[.;:\s]+$", "", s)
    s = re.sub(r"\s+"," ",s).strip()
    return s
def _flex(escaped: str) -> str:
    return (escaped.replace(r"\ ", r"\s+")
                  .replace(r"\,", r"[\s,]*")
                  .replace(r"\-", r"[\-\‚Äì\‚Äî]\s*")
                  .replace(r"\.", r"[\.\s]*"))
def template_to_regex_flex(t: str):
    if t is None: t = ""
    t = re.sub(r"\s+"," ",str(t)).strip()
    parts = re.split(r"0+", t)
    fixed = [_flex(re.escape(p)) for p in parts]
    between = r"[\s\.,;:\-\‚Äì\‚Äî]*" + r"(.+?)" + r"[\s\.,;:\-\‚Äì\‚Äî]*"
    body = between.join(fixed)
    pattern = r"^\s*" + body + r"\s*[.,;:\-‚Äì‚Äî]*\s*$"
    try: return re.compile(pattern, flags=re.IGNORECASE | re.DOTALL)
    except re.error: return re.compile(r"^\s*"+re.escape(t)+r"\s*$", re.I)

# Regras (exemplo m√≠nimo; adicione mais se quiser)
REGRAS_EMBUTIDAS = [
    {"causa":"Agendamento cancelado.","motivo":"Erro De Agendamento - Cliente desconhecia o agendamento","mascara_modelo":"Em contato com o cliente o mesmo informou que desconhecia o agendamento. Nome cliente: 0 / Data contato:  - "},
    {"causa":"Agendamento cancelado.","motivo":"Erro de Agendamento ‚Äì Endere√ßo incorreto","mascara_modelo":"Erro identificado no agendamento: 0 . Situa√ß√£o:. Cliente  - informado em "},
    {"causa":"Agendamento cancelado.","motivo":"No-show Cliente ‚Äì Ponto Fixo/M√≥vel","mascara_modelo":"Cliente n√£o compareceu para atendimento at√© √†s 0."},
    {"causa":"Agendamento cancelado.","motivo":"No-show T√©cnico","mascara_modelo":"T√©cnico 0 , em  - , n√£o realizou o atendimento por motivo de "},
]
ESPECIAIS_NO_SHOW_CLIENTE = ["Autom√°tico - PORTAL", "Michelin", "OUTRO"]

def _build_rules_map():
    return {(canon(r["causa"]), canon(r["motivo"])):(r["motivo"], template_to_regex_flex(r["mascara_modelo"]), r["mascara_modelo"])
            for r in REGRAS_EMBUTIDAS}
RULES_MAP = _build_rules_map()
def recarregar_regras():
    global RULES_MAP; RULES_MAP = _build_rules_map()
def eh_especial(valor: str) -> bool:
    v = canon(valor); return any(canon(g) in v for g in ESPECIAIS_NO_SHOW_CLIENTE if g.strip())

def read_any(f):
    if f is None: return None
    n = f.name.lower()
    if n.endswith(".csv"):
        try: return pd.read_csv(f, sep=None, engine="python")
        except Exception: f.seek(0); return pd.read_csv(f)
    try: return pd.read_excel(f, engine="openpyxl")
    except Exception: f.seek(0); return pd.read_excel(f)

def detect(full_text: str):
    if not full_text: return "", "", ""
    txt = re.sub(r"\s+"," ",str(full_text)).strip()
    txt_c = canon(txt); causa_c = canon("Agendamento cancelado.")
    for (c_norm, m_norm), (motivo_oficial, _rx, _mod) in RULES_MAP.items():
        if c_norm != causa_c: continue
        if m_norm in txt_c:
            idx = txt_c.find(m_norm)+len(m_norm)
            mascara = txt[idx:].strip(" .")
            return "Agendamento cancelado.", motivo_oficial, mascara
    return "", "", txt

def categoria(motivo: str) -> str:
    m = canon(motivo)
    if not m: return ""
    if m.startswith("erro de agendamento") or "erro de roteirizacao do agendamento" in m: return "Erro Agendamento"
    if m.startswith("falta de equipamento") or "perda/extravio" in m or "equipamento com defeito" in m: return "Falta de equipamentos"
    return ""

# ---------- app ----------
st.set_page_config(page_title="Validador No-show", layout="wide")
st.title("Validador de No-show ‚Äî um app s√≥")

from backend.db import init_db
init_db()

authenticator, ok, username, name, role = login()
if ok is False: st.error("Usu√°rio/senha inv√°lidos."); st.stop()
elif ok is None: st.info("Fa√ßa login para continuar."); st.stop()
st.sidebar.write(f"üëã {name} ‚Äî **{role}**")
authenticator.logout("Sair", "sidebar")

# ===== M√ìDULO 1 (admin) =====
if role == "admin":
    st.header("M√≥dulo 1 ‚Äî Pr√©-an√°lise e publica√ß√£o")

    file = st.file_uploader("Arquivo (xlsx/csv)", type=["xlsx","csv"])
    out = None

    with st.expander("Adicionar regras r√°pidas", expanded=False):
        ex = "Agendamento cancelado.; Erro de Agendamento ‚Äì Documento inv√°lido; OS apresentou erro de 0 identificado via 0. Cliente 0 informado em 0."
        txt = st.text_area("Cole aqui (causa ; motivo ; mascara_modelo)", value="", placeholder=ex)
        c1, c2 = st.columns(2)
        if c1.button("Aplicar"):
            for linha in txt.splitlines():
                linha = linha.strip()
                if not linha: continue
                p = [p.strip() for p in linha.split(";", 2)]
                if len(p) != 3: continue
                REGRAS_EMBUTIDAS.append({"causa":p[0], "motivo":p[1], "mascara_modelo":p[2]})
            recarregar_regras(); st.success("Regras aplicadas.")
        if c2.button("Limpar"): st.experimental_rerun()

    if file:
        df = read_any(file)
        col_main = st.selectbox("Coluna principal", df.columns)
        col_especial = st.selectbox("Coluna especial (opcional)", ["(Nenhuma)"]+list(df.columns))

        st.markdown("**Distribui√ß√£o por atendentes (opcional)**")
        qtd = st.number_input("Quantidade", 1, 200, 3)
        nomes_raw = st.text_area("Nomes (1 por linha, , ou ;)", value="")

        causas, motivos, mascaras, combos, modelos = [], [], [], [], []
        resultados, detalhes = [], []

        for _, r in df.iterrows():
            c, m, ms = detect(r.get(col_main,""))
            causas.append(c); motivos.append(m); mascaras.append(ms)
            partes = [p for p in [str(c).strip(), str(m).strip(), str(ms).strip()] if p]
            combos.append(" ".join(partes))

            modelo = ""
            if col_especial != "(Nenhuma)" and eh_especial(r.get(col_especial,"")):
                resultados.append("No-show Cliente")
                detalhes.append("Regra especial aplicada: virou No-show Cliente.")
                modelos.append(modelo); continue

            key = (canon(c), canon(m))
            found = RULES_MAP.get(key)
            if not found:
                resultados.append("No-show T√©cnico"); detalhes.append("Motivo n√£o reconhecido.")
                modelos.append(modelo); continue
            _, rx, mod = found; modelo = mod or ""
            if rx.fullmatch(re.sub(r"\s+"," ",str(ms)).strip()):
                resultados.append("M√°scara correta"); detalhes.append("")
            else:
                resultados.append("No-show T√©cnico"); detalhes.append("N√£o casa com o modelo.")
            modelos.append(modelo)

        out = df.copy()
        if "O.S." not in out.columns and "OS" in out.columns: out = out.rename(columns={"OS":"O.S."})
        if "O.S." not in out.columns: out["O.S."] = ""

        out["Causa detectada"] = causas
        out["Motivo detectado"] = motivos
        out["M√°scara prestador (preenchida)"] = mascaras
        out["M√°scara prestador"] = modelos
        out["Causa. Motivo. M√°scara (extra)"] = combos
        out["Classifica√ß√£o No-show"] = resultados
        out["Detalhe"] = detalhes

        res = []
        for r_cls, mot in zip(resultados, motivos):
            cat = categoria(mot)
            if cat: res.append(cat)
            elif r_cls in ("M√°scara correta","No-show Cliente"): res.append("No-show Cliente")
            else: res.append("No-show T√©cnico")
        out["Resultado No Show"] = res

        if "Atendente designado" not in out.columns:
            import re as _re
            nomes = [n.strip() for n in _re.split(r"[,;\n]+", nomes_raw) if n.strip()]
            if not nomes: nomes = [f"Atendente {i+1}" for i in range(int(qtd))]
            else:
                while len(nomes) < int(qtd): nomes.append(f"Atendente {len(nomes)+1}")
            bloco = int(np.ceil(len(out)/len(nomes)))
            out.insert(0, "Atendente designado", (nomes*bloco)[:len(out)])

        st.success("Pr√©-an√°lise pronta!")
        st.dataframe(out, use_container_width=True)

        if st.button("üì° Publicar para confer√™ncia (salvar no banco)"):
            ds_id = create_dataset(f"Dataset {datetime.now():%Y-%m-%d %H:%M}", name, out)
            st.success(f"Publicado! Dataset #{ds_id}.")

        buf = io.BytesIO()
        with pd.ExcelWriter(buf, engine="openpyxl") as w:
            out.to_excel(w, index=False, sheet_name="Resultado")
        st.download_button("‚¨áÔ∏è Baixar Excel (pr√©-an√°lise)", data=buf.getvalue(),
                           file_name="resultado_no_show.xlsx",
                           mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")

# ===== M√ìDULO 2 (todos) =====
st.header("M√≥dulo 2 ‚Äî Confer√™ncia (no app)")
datasets = list_datasets()
if not datasets:
    st.info("Nenhum dataset publicado.")
else:
    ds = st.selectbox("Escolha o dataset", options=datasets, format_func=lambda d: f"#{d.id} ‚Äì {d.name}")
    if ds:
        df = load_rows_for_user(ds.id, role, name)

        classificacoes = ["No-show Cliente","No-show T√©cnico","Erro Agendamento","Falta de equipamentos"]
        status_ops = ["‚úÖ App acertou","‚ùå App errou, atendente corrigiu","‚ö†Ô∏è Atendente errou","‚è≥ Pendente"]

        for i, r in df.iterrows():
            st.markdown("---")
            st.markdown(f"**O.S.:** {r.get('O.S.', '')}")
            st.markdown(f"**Texto original:** {r.get('Causa. Motivo. M√°scara (extra)', '')}")
            st.markdown(f"**Classifica√ß√£o pr√©-an√°lise:** {r.get('Classifica√ß√£o No-show','')}")
            st.markdown(f"**Resultado No Show (app):** {r.get('Resultado No Show','')}")

            detalhe = str(r.get("Detalhe","")).strip()
            is_especial = "regra especial aplicada" in detalhe.lower()
            if detalhe:
                st.warning(f"**Detalhe (regra especial):** {detalhe}") if is_especial else st.info(f"**Detalhe do app:** {detalhe}")

            modelo = "No-show Cliente" if is_especial else str(r.get("M√°scara prestador","")).strip()
            st.markdown(f"**M√°scara modelo (oficial):** `{modelo}`")

            opcoes = ([modelo] if modelo else []) + ["(Outro texto)"]
            escolha = st.selectbox(f"M√°scara conferida ‚Äî escolha (linha {i})", options=opcoes, key=f"mask_sel_{i}",
                                   help="Escolha a m√°scara oficial OU '(Outro texto)'. Em regra especial, a esperada √© 'No-show Cliente'.")
            if escolha == "(Outro texto)":
                mask = st.text_area(f"Digite a m√°scara conferida (linha {i})", value=str(r.get("M√°scara conferida","")),
                                    key=f"mask_txt_{i}", help="Texto exato que constar√° na O.S.")
            else:
                mask = escolha

            if is_especial:
                valid = "‚úÖ M√°scara correta" if canon(mask) == canon("No-show Cliente") else "‚ùå M√°scara incorreta"
            else:
                key = (canon(r.get("Causa detectada","")), canon(r.get("Motivo detectado","")))
                found = RULES_MAP.get(key)
                if found:
                    _, rx, _ = found
                    valid = "‚úÖ M√°scara correta" if rx.fullmatch(re.sub(r"\s+"," ",str(mask)).strip()) else "‚ùå M√°scara incorreta"
                else:
                    valid = "‚ö†Ô∏è Motivo n√£o reconhecido"
            st.caption(f"**Valida√ß√£o autom√°tica (conferida):** {valid}")

            df.at[i, "M√°scara conferida"] = mask
            df.at[i, "Valida√ß√£o autom√°tica (conferida)"] = valid

            if is_especial and "No-show Cliente" in classificacoes:
                idx = classificacoes.index("No-show Cliente")
            else:
                idx = classificacoes.index(r.get("Resultado No Show","")) if r.get("Resultado No Show","") in classificacoes else 0
            df.at[i, "Classifica√ß√£o ajustada"] = st.selectbox(f"Classifica√ß√£o ajustada (linha {i})",
                                                             options=classificacoes, index=idx, key=f"class_{i}")
            df.at[i, "Status da confer√™ncia"] = st.selectbox(f"Status da confer√™ncia (linha {i})",
                                                             options=status_ops, key=f"status_{i}")
            df.at[i, "Observa√ß√µes"] = st.text_area(f"Observa√ß√µes (linha {i})", value=str(r.get("Observa√ß√µes","")),
                                                   key=f"obs_{i}")

        if st.button("üíæ Salvar confer√™ncia no banco"):
            save_conferencia(df[["row_id","M√°scara conferida","Valida√ß√£o autom√°tica (conferida)",
                                 "Classifica√ß√£o ajustada","Status da confer√™ncia","Observa√ß√µes"]])
            st.success("Salvo!")

        st.markdown("### Visualiza√ß√£o/Exporta√ß√£o")
        st.dataframe(df, use_container_width=True)
        buf2 = io.BytesIO()
        with pd.ExcelWriter(buf2, engine="openpyxl") as w:
            df.to_excel(w, index=False, sheet_name="Conferencia")
        st.download_button("‚¨áÔ∏è Baixar Excel ‚Äî minha vis√£o", data=buf2.getvalue(),
                           file_name=f"conferencia_{name}.xlsx",
                           mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
